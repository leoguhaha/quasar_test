// src-electron/electron-preload.js
var { contextBridge, ipcRenderer } = require("electron");
contextBridge.exposeInMainWorld("mainApi", {
  sendSync: (channel, data) => {
    return ipcRenderer.sendSync(channel, data);
  },
  sendAsync: (channel, data) => {
    return ipcRenderer.invoke(channel, data);
  },
  receive: (channel, func) => {
    ipcRenderer.on(channel, (event, ...args) => func(...args));
  },
  subscribe: (topic) => {
    ipcRenderer.send("subscribe", topic);
  },
  unsubscribe: (topic) => {
    ipcRenderer.send("unsubscribe", topic);
  },
  sendMessage: (topic, message) => {
    ipcRenderer.send("sendMessage", topic, message);
  },
  onMessage: (func) => {
    ipcRenderer.on("message", (event, topic, message) => {
      func(topic, message);
    });
  }
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjLWVsZWN0cm9uL2VsZWN0cm9uLXByZWxvYWQuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vIHByZWxvYWQuanNcbmNvbnN0IHsgY29udGV4dEJyaWRnZSwgaXBjUmVuZGVyZXIgfSA9IHJlcXVpcmUoXCJlbGVjdHJvblwiKTtcblxuY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZChcIm1haW5BcGlcIiwge1xuICBzZW5kU3luYzogKGNoYW5uZWwsIGRhdGEpID0+IHtcbiAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZFN5bmMoY2hhbm5lbCwgZGF0YSk7XG4gIH0sXG4gIHNlbmRBc3luYzogKGNoYW5uZWwsIGRhdGEpID0+IHtcbiAgICByZXR1cm4gaXBjUmVuZGVyZXIuaW52b2tlKGNoYW5uZWwsIGRhdGEpO1xuICB9LFxuICByZWNlaXZlOiAoY2hhbm5lbCwgZnVuYykgPT4ge1xuICAgIGlwY1JlbmRlcmVyLm9uKGNoYW5uZWwsIChldmVudCwgLi4uYXJncykgPT4gZnVuYyguLi5hcmdzKSk7XG4gIH0sXG4gIHN1YnNjcmliZTogKHRvcGljKSA9PiB7XG4gICAgaXBjUmVuZGVyZXIuc2VuZChcInN1YnNjcmliZVwiLCB0b3BpYyk7IC8vIFx1NTI0RFx1N0FFRlx1OEJGN1x1NkM0Mlx1OEJBMlx1OTYwNVx1NEUzQlx1OTg5OFxuICB9LFxuICB1bnN1YnNjcmliZTogKHRvcGljKSA9PiB7XG4gICAgaXBjUmVuZGVyZXIuc2VuZChcInVuc3Vic2NyaWJlXCIsIHRvcGljKTsgLy8gXHU1MjREXHU3QUVGXHU4QkY3XHU2QzQyXHU1M0Q2XHU2RDg4XHU4QkEyXHU5NjA1XG4gIH0sXG4gIHNlbmRNZXNzYWdlOiAodG9waWMsIG1lc3NhZ2UpID0+IHtcbiAgICBpcGNSZW5kZXJlci5zZW5kKFwic2VuZE1lc3NhZ2VcIiwgdG9waWMsIG1lc3NhZ2UpOyAvLyBcdTUyNERcdTdBRUZcdTUzRDFcdTkwMDFcdTZEODhcdTYwNkZcbiAgfSxcbiAgb25NZXNzYWdlOiAoZnVuYykgPT4ge1xuICAgIC8vIFx1NEVDRVx1NEUzQlx1OEZEQlx1N0EwQlx1NjNBNVx1NjUzNlx1NkQ4OFx1NjA2RlxuICAgIGlwY1JlbmRlcmVyLm9uKFwibWVzc2FnZVwiLCAoZXZlbnQsIHRvcGljLCBtZXNzYWdlKSA9PiB7XG4gICAgICBmdW5jKHRvcGljLCBtZXNzYWdlKTtcbiAgICB9KTtcbiAgfSxcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUNBLElBQU0sRUFBRSxlQUFlLFlBQVksSUFBSSxRQUFRO0FBRS9DLGNBQWMsa0JBQWtCLFdBQVc7QUFBQSxFQUN6QyxVQUFVLENBQUMsU0FBUyxTQUFTO0FBQzNCLFdBQU8sWUFBWSxTQUFTLFNBQVMsSUFBSTtBQUFBLEVBQzNDO0FBQUEsRUFDQSxXQUFXLENBQUMsU0FBUyxTQUFTO0FBQzVCLFdBQU8sWUFBWSxPQUFPLFNBQVMsSUFBSTtBQUFBLEVBQ3pDO0FBQUEsRUFDQSxTQUFTLENBQUMsU0FBUyxTQUFTO0FBQzFCLGdCQUFZLEdBQUcsU0FBUyxDQUFDLFVBQVUsU0FBUyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQUEsRUFDM0Q7QUFBQSxFQUNBLFdBQVcsQ0FBQyxVQUFVO0FBQ3BCLGdCQUFZLEtBQUssYUFBYSxLQUFLO0FBQUEsRUFDckM7QUFBQSxFQUNBLGFBQWEsQ0FBQyxVQUFVO0FBQ3RCLGdCQUFZLEtBQUssZUFBZSxLQUFLO0FBQUEsRUFDdkM7QUFBQSxFQUNBLGFBQWEsQ0FBQyxPQUFPLFlBQVk7QUFDL0IsZ0JBQVksS0FBSyxlQUFlLE9BQU8sT0FBTztBQUFBLEVBQ2hEO0FBQUEsRUFDQSxXQUFXLENBQUMsU0FBUztBQUVuQixnQkFBWSxHQUFHLFdBQVcsQ0FBQyxPQUFPLE9BQU8sWUFBWTtBQUNuRCxXQUFLLE9BQU8sT0FBTztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNIO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
