var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src-electron/electron-main.js
var import_electron = require("electron");
var import_path = __toESM(require("path"));
var import_os = __toESM(require("os"));
var import_node_rtsp_stream = __toESM(require("node-rtsp-stream"));
var import_mqtt = __toESM(require("mqtt"));
var platform = process.platform || import_os.default.platform();
var mainWindow;
function createWindow() {
  mainWindow = new import_electron.BrowserWindow({
    icon: import_path.default.resolve(__dirname, "icons/icon.png"),
    width: 1e3,
    height: 600,
    fullscreen: false,
    useContentSize: true,
    webPreferences: {
      contextIsolation: true,
      preload: import_path.default.resolve(__dirname, "D:\\QuasarProject\\quasar-project\\.quasar\\electron\\electron-preload.js")
    }
  });
  mainWindow.loadURL("http://localhost:9300");
  if (true) {
    mainWindow.webContents.openDevTools();
  } else {
    mainWindow.webContents.on("devtools-opened", () => {
      mainWindow.webContents.closeDevTools();
    });
  }
  mainWindow.on("closed", () => {
    mainWindow = null;
  });
}
import_electron.app.whenReady().then(createWindow);
import_electron.app.on("window-all-closed", () => {
  if (platform !== "darwin") {
    import_electron.app.quit();
  }
});
import_electron.app.on("activate", () => {
  if (mainWindow === null) {
    console.log("mainWindow is null");
    createWindow();
  }
});
var rtspOpenders = {};
var addPort = 9e3;
import_electron.ipcMain.on("openRtsp", (event, rtsp) => {
  if (rtspOpenders[rtsp]) {
    event.returnValue = {
      code: 200,
      msg: "\u5F00\u542F\u6210\u529F",
      ws: rtspOpenders[rtsp].ws
    };
  } else {
    addPort++;
    const stream = new import_node_rtsp_stream.default({
      name: `socket-${addPort}`,
      streamUrl: rtsp,
      wsPort: addPort,
      ffmpegOptions: {
        "-stats": "",
        "-r": 20,
        "-s": "640x480",
        "-preset": "ultrafast",
        "-tune": "zerolatency",
        "-loglevel": "quiet",
        "-nostats": ""
      }
    }).on("exitWithError", () => {
      stream.stop();
      delete rtspOpenders[rtsp];
      event.returnValue = {
        code: 400,
        msg: "\u5F00\u542F\u5931\u8D25"
      };
    });
    rtspOpenders[rtsp] = {
      ws: `ws://localhost:${addPort}`,
      stream
    };
    event.returnValue = {
      code: 200,
      msg: "\u5F00\u542F\u6210\u529F",
      ws: rtspOpenders[rtsp].ws
    };
  }
});
import_electron.ipcMain.on("stopRtsp", (event, rtsp) => {
  if (rtspOpenders[rtsp]) {
    rtspOpenders[rtsp].stream.stop();
    delete rtspOpenders[rtsp];
  }
});
var mqttClients = [];
var globalSubscribers = /* @__PURE__ */ new Map();
var initMqttClients = () => {
  const brokers = ["mqtt://10.10.0.195:1883", "mqtt://10.10.3.16:1883"];
  for (const broker of brokers) {
    const client = import_mqtt.default.connect(broker);
    mqttClients.push(client);
    client.on("connect", () => {
      console.log(`Connected to MQTT broker at ${broker}`);
      globalSubscribers.forEach((_, topic) => {
        client.subscribe(topic);
      });
    });
    client.on("message", (topic, message) => {
      if (!message)
        return;
      const subscribers = globalSubscribers.get(topic);
      if (subscribers) {
        subscribers.forEach((winId) => {
          const win = import_electron.BrowserWindow.fromId(winId);
          if (win) {
            win.webContents.send("message", topic, message.toString());
          }
        });
      }
    });
    client.on("offline", () => {
      console.log(`Disconnected from MQTT broker at ${broker}`);
    });
    client.on("reconnect", () => {
      console.log(`Reconnecting to MQTT broker at ${broker}...`);
      globalSubscribers.forEach((_, topic) => {
        client.subscribe(topic);
      });
    });
  }
};
initMqttClients();
import_electron.ipcMain.on("subscribe", (event, topic) => {
  const winId = event.sender.id;
  if (!globalSubscribers.has(topic)) {
    globalSubscribers.set(topic, /* @__PURE__ */ new Set());
    mqttClients.forEach((client) => client.subscribe(topic));
  }
  globalSubscribers.get(topic).add(winId);
});
import_electron.ipcMain.on("unsubscribe", (event, topic) => {
  const winId = event.sender.id;
  if (globalSubscribers.has(topic)) {
    const subscribers = globalSubscribers.get(topic);
    subscribers.delete(winId);
    if (subscribers.size === 0) {
      globalSubscribers.delete(topic);
      mqttClients.forEach((client) => client.unsubscribe(topic));
    }
  }
});
//# sourceMappingURL=data:application/json;base64,
